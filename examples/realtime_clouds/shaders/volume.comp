#version 460

#extension GL_EXT_ray_query : enable

#include "ray_query_lang.glsl"
#include "hash.glsl"
#define EPSILON 1e-6
#define EPSILON3 vec3(EPSILON)
#define PI 3.1415926535897932384626433832795

//#extension GL_EXT_debug_printf : require

layout(local_size_x = 32, local_size_y = 32) in;

struct Box {
    vec3 min;
    vec3 max;
};

struct Ray{
    vec3 origin;
    vec3 direction;
    float tMax;
    float tMin;
};

struct WeatherData{
    float cloudCoverage;
    float cloudType;
    float precipitation;
};

const vec3 boxMin = vec3(-1);
const vec3 boxMax = vec3(2);

layout(set = 0, binding = 0) uniform accelerationStructure topLevelAS;
layout(set = 0, binding = 1) uniform CameraProperties{
    mat4 viewInverse;
    mat4 projInverse;
    mat4 view_projection;
} cam;

layout(set = 0, binding = 2, rgba32f) uniform image2D imageOut;
layout(set = 1, binding = 0) uniform sampler3D lowFreqencyNoises;
layout(set = 1, binding = 1) uniform sampler3D highFreqencyNoisesMap;
layout(set = 1, binding = 2) uniform sampler2D curlNoiseMap;
layout(set = 1, binding = 3) uniform sampler2D weatherMap;


layout(push_constant) uniform Constants {
    vec3 lightPosition;
    vec3 viewPosition;
    float coverage;
    float precipitation;
    float cloudType;
    float time;
    float boxScale;
    float eccentricity;
};

vec4 loadLowFreqencyNoise(vec3 p){
    return texture(lowFreqencyNoises, p);
}

vec3 loadHighFreqencyNoise(vec3 p){
    return texture(highFreqencyNoisesMap, p).xyz;
}

WeatherData loadWeatherDataForPoint(vec3 p){
    vec3 w = texture(weatherMap, p.xz).xyz;
    WeatherData wd = WeatherData(w.x, w.y, w.z);
    wd.cloudType = .5;
    wd.cloudCoverage = .6;
    wd.precipitation = 0;
    return wd;
}

bool hasNoVolume(Box box) {
    return all(equal(box.min, vec3(0))) && all(equal(box.max, vec3(0)));
}

Ray spawnRay(rayQuery rQuery){
    Ray ray;
    ray.origin = rayQueryGetWorldRayOrigin(rQuery);
    ray.direction = rayQueryGetWorldRayDirection(rQuery);
    ray.tMin = rayQueryGetRayTMin(rQuery);
    ray.tMax = 1000;

    return ray;
}

bool intersectBox(Ray ray, Box box, out float tNear, out float tFar) {
    if (hasNoVolume(box)) return false;
    vec3   tMin = (box.min - ray.origin) / ray.direction;
    vec3   tMax = (box.max - ray.origin) / ray.direction;
    vec3     t1 = min(tMin, tMax);
    vec3     t2 = max(tMin, tMax);
    tNear = max(max(t1.x, t1.y), t1.z);
    tFar = min(min(t2.x, t2.y), t2.z);
    return  tNear < ray.tMax || tNear < tFar;
}

vec3 toTexCoord(vec3 pos){
    return (pos - boxMin)/(boxMax - boxMin);
}

float remap(float x, float a, float b, float c, float d){
    float t = (x - a)/(b - a);
    return mix(c, d, t);
}


bool isInsideBounds(vec3 p){
    vec3 a = sign(boxMax * boxScale - p);
    vec3 b = sign(boxMin * boxScale - p);

    return dot(a, b) >= 3;
}

float sdTorus( vec3 p, vec2 t )
{
    vec2 q = vec2(length(p.xz)-t.x,p.y);
    return length(q)-t.y;
}

bool inCloud(out Ray ray);

float heightFractionForPoint(vec3 p){
    return ((p - boxMin * boxScale)/(((boxMax - boxMin) * boxScale))).y;
}

vec3 samplePointForPoint(vec3 p){
    return p * 0.1;
    //return ((p - boxMin * boxScale)/(((boxMax - boxMin) * boxScale)));
}

float cubeSDF(vec3 p, vec3 size){
    vec3 q = abs(p) - size;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float cumulonimbusCloud(float x){
    return pow( 4.0*x*(1.0-x), .8 );
}

float cubicPulse( float c, float w, float x )
{
    x = abs(x - c);
    if( x>w ) return 0.0;
    x /= w;
    return 1.0 - x*x*(3.0-2.0*x);
}

float cumulusCloud(float x){
    return cubicPulse(0.3, 0.35, x);
}

float stratusCloud(float x){
    return cubicPulse(0.1, 0.1, x);
}

float densityHeightGradientForPoint(vec3 p, float cloud_type){

    float height = heightFractionForPoint(p);

    const vec4 stratusGrad = vec4(0.02f, 0.05f, 0.09f, 0.11f);
    const vec4 stratocumulusGrad = vec4(0.02f, 0.2f, 0.48f, 0.625f);
    const vec4 cumulusGrad = vec4(0.01f, 0.0625f, 0.78f, 1.0f);
    float stratus = 1.0f - clamp(cloud_type * 2.0f, 0, 1);
    float stratocumulus = 1.0f - abs(cloud_type - 0.5f) * 2.0f;
    float cumulus = clamp(cloud_type - 0.5f, 0, 1) * 2.0f;
    vec4 cloudGradient = stratusGrad * stratus + stratocumulusGrad * stratocumulus + cumulusGrad * cumulus;
    return smoothstep(cloudGradient.x, cloudGradient.y, height) - smoothstep(cloudGradient.z, cloudGradient.w, height);
}

float henyeyGreenstein(vec3 lightDir, vec3 viewDir, float g){
    vec3 L = normalize(lightDir);
    vec3 V = normalize(viewDir);
    float _2gcos0 = 2 * g * max(0, dot(L, V));
    float gg = g * g;
    float num = 1 - gg;
    float denum = 4 * PI * pow(1 + gg - _2gcos0, 1.5);

    return num / denum;
}

float sampleCloudDensity(vec3 p){
    vec3 sp = samplePointForPoint(p);
    vec4 noiseComp = loadLowFreqencyNoise(sp);
    float perlinWorly = noiseComp.x;
    float wfbm = dot(vec3(.625, .25, .125), noiseComp.gba);
    float cloud = remap(perlinWorly, wfbm - 1, 1, 0, 1);

    WeatherData wd = loadWeatherDataForPoint(sp);

    float densityHeightField = densityHeightGradientForPoint(p, wd.cloudType);
    cloud *= densityHeightField;


    float coverage = wd.cloudCoverage;

    cloud = remap(cloud, 1 - coverage, 1, 0, 1);
    cloud *= coverage;

    float hightFraction = heightFractionForPoint(p);
    vec2 curlNoise = texture(curlNoiseMap, sp.xz).xy;
    sp.xz += curlNoise * -hightFraction;
    vec3 highFreqencyNoises = loadHighFreqencyNoise(sp * 0.1);

    float highFreqencyFBM = dot(highFreqencyNoises, vec3(.625, .25, .125));

    float highFreqencyNoiseModifier = mix(highFreqencyFBM, 1 - highFreqencyFBM, clamp(hightFraction * 10, 0, 1));

    cloud = remap(cloud, highFreqencyNoiseModifier * 0.2, 1.0, 0.0, 1.0);

    return cloud;
}


const vec3 noise_kernel[] = {
    vec3(-0.316253, 0.147451, -0.902035),
    vec3(0.208214, 0.114857, -0.669561),
    vec3(-0.398435, -0.105541, -0.722259),
    vec3(0.0849315, -0.644174, 0.0471824),
    vec3(0.470606, 0.99835, 0.498875),
    vec3(-0.207847, -0.176372, -0.847792)
};

float sampleCloudDensityAlongCone(vec3 samplePos, vec3 direction){
    vec3 lightStep = direction * 0.1;
    float coneSpreadMultiplier = length(lightStep);
    int lod = -1;

    float density = 0;
    vec3 p = samplePos;
    for(int i = 0; i < 6; i++){
        p += lightStep * (coneSpreadMultiplier * noise_kernel[i] * float(i));

        density += sampleCloudDensity(p);
    }

    return density;
}

float lightEnergy(float sampleDensity, float percipitation, float eccentricity, vec3 samplePos, vec3 camPos, vec3 lightPos){
    float d = sampleDensity;
    float p = percipitation;
    float g = eccentricity;
    vec3 lightDir = normalize(lightPos - samplePos);
    vec3 viewDir = normalize(camPos - samplePos);
    float hg = henyeyGreenstein(lightDir, viewDir, g);

    return 2.0 * exp(-d * p) * (1 - exp(-2 * d)) * hg;
}

float sampleLightEnergy(vec3 samplePosition, vec3 direction, float cloudDensity){
    if(cloudDensity <= 0) return 1;

    float sampleDensity = sampleCloudDensityAlongCone(samplePosition, direction);
    return 50 * lightEnergy(sampleDensity, precipitation, eccentricity, samplePosition, viewPosition, lightPosition);

}

const vec3 windDirection = vec3(1, 0, 1);
const float cloudSpeed = 0.5;
const float cloud_top_offset = 1;


void main(){
    //    debugPrintfEXT("min: [%.f, %.f]\n", width, height);
    vec4 color = vec4(0);
    Ray ray;

    const float maxDist = distance(boxMin, boxMax) * boxScale;
    if(inCloud(ray)){
        float horizonFactor = dot(ray.direction, vec3(0, 1, 0));
        const float MaxSteps = floor(mix(35, 60, horizonFactor));

        float tMin = ray.tMin;
        float tMax = ray.tMax;
        float diff = tMax - tMin;
        float stepSize = diff/MaxSteps;


        for(int i = 0; i < MaxSteps; i++){
            float t = tMin + (stepSize * i);
            vec3 offset = hash33(gl_GlobalInvocationID + t * 100) * 0.1;
            vec3 p = ray.origin + (ray.direction + offset) * t;
            float heightFraction = heightFractionForPoint(p);
            p += heightFraction * windDirection * cloud_top_offset;

            p -= (windDirection + vec3(0, 0.01, 0)) * time * cloudSpeed;
            float cloud = sampleCloudDensity(p);
            float energy = sampleLightEnergy(p, ray.direction, cloud);

            float prev_alpha = cloud - (cloud * color.a);
            color.rgb += prev_alpha * cloud * energy;
            color.a += prev_alpha;

            if(color.a > 0.99){
                break;
            }

            if(i > MaxSteps){
//                debugPrintfEXT("[tMin: %.32f, t: %.32f, tMax: %.32f, stepSize: %.32f]\n,", tMin, t, tMax, stepSize);
                break;
            }
        }
    }
    color.rgb /= 1 + color.rgb;
    imageStore(imageOut, ivec2(gl_GlobalInvocationID), color);
}

bool test(inout Ray ray, Box box);

bool test2(inout Ray ray, Box box);

bool inCloud(out Ray ray){
    ivec2 id = ivec2(gl_GlobalInvocationID);

    ivec2 center = ivec2(1920, 1080)/2;

    if(id.x >= 1920 || id.y >= 1080) return false;

    const vec2 pixelCenter = vec2(id) + vec2(0.5);
    const vec2 uv = pixelCenter/vec2(1920, 1080);
    vec2 d = uv * 2.0 - 1.0;

    vec3 origin = vec3(cam.viewInverse * vec4(0,0,0,1));
    vec3 target = vec3(cam.projInverse * vec4(d.x, d.y, 1, 1));
    vec3 direction = vec3(cam.viewInverse*vec4(normalize(target.xyz), 0));
    direction = normalize(direction);

    ray.origin = origin;
    ray.direction = direction;
    float dist = 0.2;
    vec3 boxHalfSize = (boxMax - boxMin) * 0.5 * boxScale;
//   for(int i = 0; i < 100; i++){
//        vec3 p = origin + direction * dist;
//        float t = cubeSDF(p, boxHalfSize);
//        if(t < 0.000001){
//            ray.origin = p;
//            ray.direction = direction;
//            ray.tMin = 0;
//            ray.tMax = length(boxHalfSize) * 2;
//            return true;
//        }
//        dist += t;
//        if(dist > 100) break;
//    }
//    return false;

    return test2(ray, Box(boxMin * boxScale, boxMax * boxScale));
}

bool test2(inout Ray ray, Box box){
    vec3 n = vec3(0, 1, 0);
    float t0 = (box.min.y - dot(ray.origin, n))/dot(ray.direction, n);
    float t1 = (box.max.y - dot(ray.origin, n))/dot(ray.direction, n);

    ray.tMin = min(t0, t1);
    ray.tMax = max(t0, t1);

    if((ray.tMin < 0 && ray.tMax < 0) && (ray.origin.y > box.min.y && ray.origin.y < box.max.y)){
        ray.tMin = 0;
        ray.tMax = distance(box.min, box.max);
        return true;
    }

    ray.tMin = max(0, ray.tMin);

    return ray.tMin >= 0 && ray.tMax >= 0;
}

bool test(inout Ray ray, Box box){
    bvec3 parallelRay = lessThan(abs(ray.direction), EPSILON3);
    for(int i = 0; i < 3; i++){
        if(parallelRay[i]){
            if(ray.origin[i] < box.min[i] || ray.origin[i] > box.max[i]){
                return false;
            }
        }
    }

    vec3 t0 = (box.min - ray.origin)/ray.direction;
    vec3 t1 = (box.max - ray.origin)/ray.direction;

    vec3 tMax = max(t0, t1);
    vec3 tMin = min(t0, t1);

    float tNear = max(max(tMin.x, tMin.y), tMin.z);
    float tFar = min(min(tMax.x, tMax.y), tMax.z);

    ray.tMin = max(0, tNear);
    ray.tMax = tFar;

//    ray.tMax = tNear + distance(box.min, box.max);
    return tNear < tFar;

}
