#version 460

#define RADIANCE_API_ENABLED

#include "atmosphere_lut.glsl"
#include "common.glsl"

#define SIZE vec3(gl_NumWorkGroups * gl_WorkGroupSize)
#define gID ivec3(gl_GlobalInvocationID)
#define LOC ivec3(gl_GlobalInvocationID)

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 2, binding = 0) uniform SCENE_UBO{
    mat4 inverse_projection;
    mat4 inverse_view;
    vec3 camera;
    vec3 white_point;
    vec3 earth_center;
    vec3 sun_direction;
    vec3 sun_size;
    vec3 kSphereAlbedo;
    vec3 kGroundAlbedo;
    float exposure;
    float near;
    float far;
};

layout(set = 3, binding = 0, rgba32f) uniform image3D transmittance_volume;
layout(set = 3, binding = 1, rgba32f) uniform image3D in_scattering_volume;

vec3 voxel_to_uv(vec3 voxel){
    vec3 uv = vec3(voxel.xy/SIZE.xy, exponentialDepth(near, far, voxel.z, SIZE.z));
    return uv;
}

vec3 remap(vec3 x, vec3 a, vec3 b, vec3 c, vec3 d){
    return mix(c, d, (x-a)/(b - a));
}

vec3 kSphereCenter = vec3(0.0, 1.0, 0) * km;
float kSphereRadius = 1.0 * km;

float GetSunVisibility(Ray ray, vec3 point, vec3 normal){
    ray.origin = point + normal * 0.0001;
    ray.direction = sun_direction;

    Sphere sphere = Sphere(kSphereCenter, kSphereRadius);

    float t;
    return sphereTest(ray, sphere, t) ? 0 : 1;
}

void main(){
    vec3 voxel = vec3(gl_GlobalInvocationID) + 0.5;
    vec3 uv = voxel_to_uv(voxel);
    vec3 clipPoint = uv_to_ndc(uv, near, far);
    vec4 viewPoint = inverse_projection * vec4(clipPoint, 1);
    vec4 HCoord = inverse_view * viewPoint;
    vec3 worldPos = HCoord.xyz / HCoord.w;

    vec3 view_ray = worldPos - camera;
    Ray ray = Ray(camera, view_ray);
    Sphere sphere = Sphere(kSphereCenter, kSphereRadius);
    Sphere ground = Sphere(earth_center, length(earth_center));

    vec2 dist = vec2(length(view_ray), 0);

    float ts;
    float sphere_alpha = 0;
    vec3 sphere_radiance = vec3(0);
    if(sphereTest(ray, sphere, ts)){
        vec3 point = ray.origin + ray.direction * ts;
        dist.y = length(point - ray.origin);
        if(length(point - ray.origin) < length(view_ray)){
            sphere_alpha = 1;
            vec3 normal = normalize(point - kSphereCenter);
            vec3 sky_irradiance;
            vec3 sun_irradiance = GetSunAndSkyIrradiance(point - earth_center, normal, sun_direction, sky_irradiance);
            sphere_radiance = (kSphereAlbedo / PI) * (sky_irradiance + sun_irradiance);

            vec3 transmittance;
            vec3 in_scatter = GetSkyRadianceToPoint(camera - earth_center, point - earth_center, 0, sun_direction, transmittance);
            sphere_radiance = sphere_radiance * transmittance + in_scatter;
        }
    }

    float tg;
    vec3 ground_radiance = vec3(0);
    float ground_alpha = 0;
    if(sphereTest(ray, ground, tg)){
        vec3 point = ray.origin + ray.direction * tg;
        if(tg < ts){

            ground_alpha = 1;

            vec3 normal = normalize(point - earth_center);
            vec3 sky_irradiance;
            vec3 sun_irradiance = GetSunAndSkyIrradiance(point - earth_center, normal, sun_direction, sky_irradiance);
            ground_radiance = (kGroundAlbedo / PI) * (sky_irradiance + sun_irradiance * GetSunVisibility(ray, point, normal));

            vec3 transmittance;
            vec3 in_scatter = GetSkyRadianceToPoint(camera - earth_center, point - earth_center, 0, sun_direction, transmittance);
            ground_radiance = ground_radiance * transmittance + in_scatter;
        }
    }

    vec3 transmittance;
    vec3 radiance = GetSkyRadiance(camera - earth_center, ray.direction, 0, sun_direction, transmittance);
    if (dot(ray.direction, sun_direction) > sun_size.y) {
        radiance = radiance + transmittance * GetSolarRadiance();
    }

    radiance = mix(radiance, sphere_radiance, sphere_alpha);
    radiance = mix(radiance, ground_radiance, ground_alpha);

    radiance = pow(vec3(1.0) - exp(-radiance / white_point * exposure), vec3(1.0 / 2.2));

    imageStore(transmittance_volume, ivec3(gl_GlobalInvocationID), vec4(radiance, 0));
}