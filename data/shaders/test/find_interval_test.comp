#version 460

layout(set = 0, binding = 0) uniform sampler1D data;

layout(set = 0, binding = 1) buffer OUTPUT {
    int results[];
};

layout(local_size_x = 1) in;

float findInterval(sampler1D distribution, float value){
    int size = textureSize(distribution, 0);
    int first = 0;
    int len = size;
    while(len > 0){
        int half_len = len >> 1;
        int middle = first + half_len;
        float u = float(middle + .5)/float(size);
        float distValue = texture(distribution, u).r;
        if(distValue <= value){
            first =  middle + 1;
            len -= half_len + 1;
        }else {
            len = half_len;
        }
    }
    int index = clamp(first - 1, 0, size - 2);
    return float(index + .5)/size;
}

void main(){
    int size = textureSize(data, 0);
    int outId = 0;

    for(int i = 0; i < size; i++){
        float u = float(i + .5)/size;
        float value = texture(data, u).r;
        u = findInterval(data, value);
        results[outId++] = int(round(u * size - .5));
    }

    float value = 35;
    float u = findInterval(data, value);
    results[outId++] = int(round(u * size - .5));

    value = 115;
    u = findInterval(data, value);
    results[outId++] = int(round(u * size - .5));

    value = 5;
    u = findInterval(data, value);
    results[outId++] = int(round(u * size - .5));

}