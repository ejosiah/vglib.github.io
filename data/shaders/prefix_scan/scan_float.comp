#version 460 core

#define DATA_ITERMS_PER_WORKGROUP 8192
#define STUFF 0
#define SHARED_STORAGE_SIZE (2048)
#define BANKS 32
#define LOG_BANKS 5
#define CONFLICT_FREE_OFFSET(n) (((n) >> LOG_BANKS))
#define NUM_SMEM_ELEMENTS SHARED_STORAGE_SIZE + CONFLICT_FREE_OFFSET(SHARED_STORAGE_SIZE)
#define CONFLICT_FREE_ID(n) (n) + CONFLICT_FREE_OFFSET(n)
#define GET_DATA(INDEX) (INDEX < N ? g_data[INDEX] : zeroValue())
#define SET_DATA(INDEX, VALUE) \
if(INDEX < N){ g_data[INDEX] = VALUE; }

#define OPERATION_ADD 0
#define OPERATION_MIN 1
#define OPERATION_MAX 2

layout(local_size_x = 1024) in;

layout(set = 0, binding = 0) buffer DATA {
  float g_data[];
};

layout(set = 0, binding = 1) buffer SUMS {
  float g_sums[];
};

layout(push_constant) uniform Constants{
  uint itemsPerWorkGroup;
  uint N;
  uint operation;
};

shared float data[NUM_SMEM_ELEMENTS];

void scan(inout vec4 v, out float sum);

float op(float a, float b);
vec4 op(vec4 a, vec4 b);

float zeroValue();

void main(){
  int thid  = int(gl_LocalInvocationIndex);
  int gthid = int(gl_GlobalInvocationID.x);
  int gthid2 = int(gthid + SHARED_STORAGE_SIZE/2);
  int gOffset = int(gl_WorkGroupID.x * DATA_ITERMS_PER_WORKGROUP/2);
  int n = SHARED_STORAGE_SIZE;

  // sequencial memory access
  vec4 temp0 = vec4(GET_DATA(4 * gthid + 0 + gOffset), GET_DATA(4 * gthid + 1 + gOffset), GET_DATA(4 * gthid + 2 + gOffset), GET_DATA(4 * gthid + 3 + gOffset));
  vec4 temp1 = vec4(GET_DATA(4 * gthid2 + 0 + gOffset), GET_DATA(4 * gthid2 + 1 + gOffset), GET_DATA(4 * gthid2 + 2 + gOffset), GET_DATA(4 * gthid2 + 3 + gOffset));
  float sum = 0;
  int ai = CONFLICT_FREE_ID(thid);
  scan(temp0, sum);
  data[ai] = sum;

  int bi = CONFLICT_FREE_ID(thid + SHARED_STORAGE_SIZE/2);
  scan(temp1, sum);
  data[bi] = sum;

  int offset = 1;
  for(int d = (n >> 1); d > 0; d >>= 1){
    barrier();
    if(thid < d){
      int ai = CONFLICT_FREE_ID(offset * (2 * thid + 1) - 1);
      int bi = CONFLICT_FREE_ID(offset * (2 * thid + 2) - 1);

      data[bi] = op(data[bi], data[ai]);
    }
    offset *= 2;
  }

  if(thid == 0){
    int last = CONFLICT_FREE_ID(n - 1);
    float temp = data[last];
    data[last] = zeroValue();
    g_sums[gl_WorkGroupID.x] = temp;
  }

  for(int d = 1; d < n; d *= 2){
    offset >>= 1;
    barrier();
    if(thid < d){
      int ai = CONFLICT_FREE_ID(offset * (2 * thid + 1) - 1);
      int bi = CONFLICT_FREE_ID(offset * (2 * thid + 2) - 1);

      float temp = data[bi];
      data[bi] = op(temp, data[ai]);
      data[ai] = temp;
    }
  }

  barrier();

  float sum0 = data[ai];
  float sum1 = data[bi];

  temp0 = op(temp0, vec4(sum0));
  temp1 = op(temp1, vec4(sum1));

  SET_DATA(4 * gthid + 0 + gOffset, temp0.x)
  SET_DATA(4 * gthid + 1 + gOffset, temp0.y)
  SET_DATA(4 * gthid + 2 + gOffset, temp0.z)
  SET_DATA(4 * gthid + 3 + gOffset, temp0.w)

  SET_DATA(4 * gthid2 + 0 + gOffset, temp1.x)
  SET_DATA(4 * gthid2 + 1 + gOffset, temp1.y)
  SET_DATA(4 * gthid2 + 2 + gOffset, temp1.z)
  SET_DATA(4 * gthid2 + 3 + gOffset, temp1.w)
}

void scan(inout vec4 v, out float sum){
  sum = zeroValue();
  float temp = v.x;
  v.x = sum;
  sum = op(sum, temp);

  temp = v.y;
  v.y = sum;
  sum = op(sum, temp);

  temp = v.z;
  v.z = sum;
  sum = op(sum, temp);

  temp = v.w;
  v.w = sum;
  sum = op(sum, temp);
}

float op(float a, float b) {
  switch(operation) {
    case OPERATION_MIN: return min(a, b);
    case OPERATION_MAX: return max(a, b);
    default:  return a + b;
  }
}

vec4 op(vec4 a, vec4 b) {
  switch(operation) {
    case OPERATION_MIN: return min(a, b);
    case OPERATION_MAX: return max(a, b);
    default:  return a + b;
  }
}

float zeroValue() {
  switch(operation) {
    case OPERATION_MIN: return 3.4028235e+38;
    case OPERATION_MAX: return 1.1754944e-38;
    default:  return 0.0;
  }
}