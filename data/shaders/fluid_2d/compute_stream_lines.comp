#version 460

#extension GL_EXT_scalar_block_layout : enable

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) buffer StreamLines {
    vec2 lines[];
};

layout(set = 0, binding = 1, scalar) buffer Constants {
    vec3 color;
    ivec2 grid_size;
    float step_size;
    uint next_vertex;
    uint offset;
};

layout(set = 1, binding = 0) uniform sampler2D vector_field_u;
layout(set = 2, binding = 0) uniform sampler2D vector_field_v;


vec2 loadVectorField(vec2 uv) {
    vec2 u;
    u.x = texture(vector_field_u, uv).x;
    u.y = texture(vector_field_v, uv).x;

    return u;
}

ivec2 gid = ivec2(gl_GlobalInvocationID * offset);
vec2 uv = (vec2(gid) + 0.5)/grid_size.xy;

void main () {
    if(gid.x >= grid_size.x || gid.y >= grid_size.y) return;

    vec2 u = loadVectorField(uv);
    if(u.x == 0 || u.y == 0) return;

    float l = length(uv);
    if(isnan(l) || isinf(l)) return;

    vec2 x0 = uv + u * step_size;

    u = loadVectorField(x0);

    vec2 x1 = x0 + u * step_size;

    u = loadVectorField(x1);

    vec2 x2 = x1 + u * step_size;

    vec2 gs = vec2(grid_size);
    lines[atomicAdd(next_vertex, 1)] = 2 * x0 - 1;
    lines[atomicAdd(next_vertex, 1)] = 2 * x1 - 1;
    lines[atomicAdd(next_vertex, 1)] = 2 * x1 - 1;
    lines[atomicAdd(next_vertex, 1)] = 2 * x2 - 1;

}