#version 460
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 32, local_size_y = 32) in;

#include "common_new.glsl"

layout(set = 1, binding = 0) uniform sampler2D vector_field_u;
layout(set = 2, binding = 0) uniform sampler2D vector_field_v;
layout(set = 3, binding = 0) uniform sampler2D ph1_n1_texture;
layout(set = 4, binding = 0) uniform sampler2D ph1_n_texture;
layout(set = 5, binding = 0) uniform sampler2D quantity;
layout(set = 6, binding = 2) uniform writeonly image2D quantity_out;

vec2 loadVectorField(vec2 uv) {
    vec2 u;
    u.x = texture(vector_field_u, uv).x;
    u.y = texture(vector_field_v, uv).x;

    return u;
}

void updateQuantity(vec4 q) {
    imageStore(quantity_out, gid, q);
}

void main() {
    if(outOfBounds()) return;

    vec2 uv = get_uv();
    vec2 u = loadVectorField(uv);

    vec2 p = (uv -  dt * u);

    vec2 p0 = floor(p/(dx + dy) - 0.5) + 0.5;
    p0  = p0 * (dx + dy);
    vec2 p1 = p0 + dx;
    vec2 p2 = p0 + dy;
    vec2 p3 = p1 + dy;

    vec4 q0 = texture(quantity, p0);
    vec4 q1 = texture(quantity, p1);
    vec4 q2 = texture(quantity, p2);
    vec4 q3 = texture(quantity, p3);

    vec4 qMin = min(min(q0, q1), min(q2, q3));
    vec4 qMax = max(max(q0, q1), max(q2, q3));

    vec4 ph1_n1h = texture(ph1_n1_texture, uv);
    vec4 ph1_nh = texture(ph1_n_texture, p);
    vec4 ph1n = texture(quantity, uv);

    vec4 q = (ph1_n1h + 0.5 * (ph1n - ph1_nh));
    q = clamp(q, qMin, qMax);
    updateQuantity(q);
}